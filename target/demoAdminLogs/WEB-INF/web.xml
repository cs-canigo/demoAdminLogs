<?xml version="1.0" encoding="UTF-8"?><web-app id="WebApp_ID" version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"> <display-name>Canigo 3.0</display-name> <!-- 		Paràmetre de context que utilitza el org.springframework.web.context.ContextLoaderListener		per inicialitzar el context de Spring.	 --> <context-param>  <param-name>contextConfigLocation</param-name>  <param-value>classpath:cat/gencat/ctti/canigo/arch/core/config/canigo-core.xml</param-value> </context-param>	<filter>		<filter-name>CorsFilter</filter-name>		<filter-class>cat.gencat.demoadminlogs.filters.CorsFilter</filter-class>		 <async-supported>true</async-supported>	</filter> <!--		Filtre que inicialitza les traces de l'aplicació. Es pot sobrecarregar		per afegir dades aplicatives al pattern de log4j	--> <filter>  <filter-name>Logging Filter</filter-name>  <filter-class>cat.gencat.ctti.canigo.arch.web.core.filters.LoggingFilter</filter-class>   <async-supported>true</async-supported> </filter> <!--		Filtre que proporciona a l'aplicació el suport d'internacionalització		a l'aplicació	--> <filter>  <filter-name>Localization Filter</filter-name>  <filter-class>cat.gencat.ctti.canigo.arch.web.core.filters.LocalizationFilter</filter-class>   <async-supported>true</async-supported> </filter> <!-- 	UrlRewriteFilter 	 --> <filter>  <filter-name>UrlRewriteFilter</filter-name>  <filter-class>cat.gencat.ctti.canigo.arch.web.core.filters.urlrewrite.UrlRewriteFilter</filter-class>  <async-supported>true</async-supported>  <init-param>   <param-name>confPath</param-name>   <param-value>classpath:urlrewrite/urlrewrite.xml</param-value>  </init-param> </filter>  <filter-mapping>  <filter-name>CorsFilter</filter-name>  <url-pattern>/*</url-pattern></filter-mapping>   <filter-mapping>  <filter-name>UrlRewriteFilter</filter-name>  <url-pattern>/*</url-pattern> </filter-mapping> <!--		If you don't specify the contextConfigLocation context parameter, the		ContextLoaderListener will look for a /WEB-INF/applicationContext.xml		file to load. Once the context files are loaded, Spring creates a		WebApplicationContext object based on the bean definitions and puts it		into the ServletContext.	--> <listener>  <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> </listener> <!--		Servlet 2.4+ listener that exposes the request to the current thread,		through both LocaleContextHolder and RequestContextHolder. To be		registered as listener in web.xml. Alternatively, Spring's		RequestContextFilter and Spring's DispatcherServlet also expose the		same request context to the current thread. This listener is mainly		for use with third-party servlets, e.g. the JSF FacesServlet. Within		Spring's own web support, DispatcherServlet's processing is perfectly		sufficient.	--> <listener>  <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class> </listener>  <servlet>	<servlet-name>dispatcher</servlet-name>	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>	<load-on-startup>2</load-on-startup>	<async-supported>true</async-supported></servlet><servlet-mapping>	<servlet-name>dispatcher</servlet-name>	<url-pattern>/api/*</url-pattern></servlet-mapping><!--	Exemple seguretat	<security-constraint>          <web-resource-collection>               <web-resource-name>REST Services</web-resource-name>               <url-pattern>/services/*</url-pattern>               <http-method>PUT</http-method>               <http-method>POST</http-method>               <http-method>DELETE</http-method>          </web-resource-collection>          <auth-constraint>              <role-name>administrator</role-name>           </auth-constraint>    </security-constraint>     <login-config>        <auth-method>BASIC</auth-method>        <realm-name>default</realm-name>    </login-config>      <security-role>         <role-name>administrator</role-name>     </security-role>--> <!-- 		Session timeout: 30 minutes 	--> <session-config>  <session-timeout>30</session-timeout> </session-config></web-app>